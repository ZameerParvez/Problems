#include <vector>

#include "../DataStructures/ArrayList.h"
#include "0000-Test.h"

using std::vector;
using std::string;

using namespace Algorithms;

int Test::parseInput(istream& input) {
  LOG(50, "This should be logging the input stage of the test algorithm");
  string line;
  getline(input,line);
  std::istringstream s{line};
  
  vector<string> commaseperated;
  while (s.good()) {
    string substr;
    getline(s, substr, ',');
    commaseperated.push_back(substr);
  }

  return 0;
}

// testing the impact on performance for the logger
// void testof10() {
//   TIMER("timing how long it takes to log 10 ints");
//   LOG(
//     50,
//     "% % % % %-% % % % %-",
//     1,2,3,4,5,6,7,8,9,10
//   );
// }

// void testof100() {
//   TIMER("timing how long it takes to log 100 ints");
//   LOG(
//     50,
//     "% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-",
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10
//   );
// }

// void testof1000() {
//   TIMER("timing how long it takes to log 1000 ints");
//   LOG(
//     50, 
//     "% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-"
//     "% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-"
//     "% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-"
//     "% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-"
//     "% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-% % % % %-",
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
    
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,

//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,

//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,

//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10,
//     1,2,3,4,5,6,7,8,9,10
//   );
// }

int Test::solve(ostream& output) {
  TIMER("This should be the how long the algorithm being tested should take");
  // testof10();
  // testof100();
  // testof1000();
  output << "THIS IS THE TEST ALGORITHM,  WHICH COULD MEAN THAT THE ALGORITHM ID ENTERED WAS WRONG" << std::endl;

  return 0;
}